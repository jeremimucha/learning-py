#!/usr/bin/env python3
from enum import Enum
from datetime import datetime
import time
from typing import Optional, List, Set, Any

from fastapi import FastAPI, Depends, Query, Path, Body, Header, HTTPException, status, Request
from fastapi.responses import JSONResponse
from fastapi.encoders import jsonable_encoder
from pydantic import BaseModel, Required, Field, HttpUrl, EmailStr

app = FastAPI()

# A "middleware" is a function that works with every request before it is processed by any specific path operation.
# And also with every response before returning it.
#
# - Takes each request that comes to the app,
# - Can process the request or execute arbitrary code,
# - Passes the request for further processing,
# - Then takes the response generated by the application, processes the response, runs arbitrary code,
# - Then it returns the response.


@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response
